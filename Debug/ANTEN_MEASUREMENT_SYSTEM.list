
ANTEN_MEASUREMENT_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f8  080034f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003500  08003500  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08003514  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003514  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  0002cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bfb  00000000  00000000  0002fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de06  00000000  00000000  00050a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7204  00000000  00000000  0005e821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125a25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a88  00000000  00000000  00125a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003494 	.word	0x08003494

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003494 	.word	0x08003494

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fb19 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f84d 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f915 	bl	8000738 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050e:	f000 f8bb 	bl	8000688 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000512:	f000 f8e7 	bl	80006e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <main+0x90>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	68da      	ldr	r2, [r3, #12]
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <main+0x90>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f042 0220 	orr.w	r2, r2, #32
 8000524:	60da      	str	r2, [r3, #12]

  uint16_t addr;
  for(addr=1;addr<0xFF;addr++){
 8000526:	2301      	movs	r3, #1
 8000528:	80fb      	strh	r3, [r7, #6]
 800052a:	e00d      	b.n	8000548 <main+0x4c>
	  if(HAL_I2C_IsDeviceReady(&hi2c1, addr<<1, 3, 100)==HAL_OK){
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	b299      	uxth	r1, r3
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	2203      	movs	r2, #3
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <main+0x94>)
 8000538:	f001 f810 	bl	800155c <HAL_I2C_IsDeviceReady>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <main+0x54>
  for(addr=1;addr<0xFF;addr++){
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	3301      	adds	r3, #1
 8000546:	80fb      	strh	r3, [r7, #6]
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	2bfe      	cmp	r3, #254	; 0xfe
 800054c:	d9ee      	bls.n	800052c <main+0x30>
 800054e:	e000      	b.n	8000552 <main+0x56>
		  break;
 8000550:	bf00      	nop
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_Delay(3000);
 8000552:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000556:	f000 fb61 	bl	8000c1c <HAL_Delay>
	    GSM_AT_Send("AT\r\n", 4, "\r\nOK\r\n", 6, 5);//AT Komutuna ok yanıtı alabliyoruz
 800055a:	2305      	movs	r3, #5
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2306      	movs	r3, #6
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <main+0x98>)
 8000562:	2104      	movs	r1, #4
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0x9c>)
 8000566:	f000 f91d 	bl	80007a4 <GSM_AT_Send>
	    HAL_Delay(200);
 800056a:	20c8      	movs	r0, #200	; 0xc8
 800056c:	f000 fb56 	bl	8000c1c <HAL_Delay>
	    GSM_AT_Send("AT+CSQ\r\n", 8, "\r\n+CSQ: 20,99\r\n\r\nOK\r\n", 21, 5);// Bu kısımda gönderilen CSQ komutuna karşı cevap alınamıyor, sistem düşündüğümüz gibi değil mi acaba?
 8000570:	2305      	movs	r3, #5
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2315      	movs	r3, #21
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <main+0xa0>)
 8000578:	2108      	movs	r1, #8
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0xa4>)
 800057c:	f000 f912 	bl	80007a4 <GSM_AT_Send>
	    HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 fb4a 	bl	8000c1c <HAL_Delay>
	    HAL_Delay(3000);
 8000588:	e7e3      	b.n	8000552 <main+0x56>
 800058a:	bf00      	nop
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000070 	.word	0x20000070
 8000594:	080034ac 	.word	0x080034ac
 8000598:	080034b4 	.word	0x080034b4
 800059c:	080034bc 	.word	0x080034bc
 80005a0:	080034d4 	.word	0x080034d4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ff4e 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <SystemClock_Config+0xdc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <SystemClock_Config+0xdc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SystemClock_Config+0xdc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <SystemClock_Config+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a25      	ldr	r2, [pc, #148]	; (8000684 <SystemClock_Config+0xe0>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <SystemClock_Config+0xe0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000618:	23b4      	movs	r3, #180	; 0xb4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc37 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 f900 	bl	800083c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800063c:	f001 f914 	bl	8001868 <HAL_PWREx_EnableOverDrive>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000646:	f000 f8f9 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f94d 	bl	8001908 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000674:	f000 f8e2 	bl	800083c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f000 fe05 	bl	80012d4 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f8b4 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000070 	.word	0x20000070
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART3_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800071c:	f001 fe5e 	bl	80023dc <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f889 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000002c 	.word	0x2000002c
 8000734:	40004800 	.word	0x40004800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_GPIO_Init+0x68>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_GPIO_Init+0x68>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_GPIO_Init+0x68>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <GSM_AT_Send>:

/* USER CODE BEGIN 4 */
char GSM_AT_Send(char *Cmd, char CmdSize, char *rData, char RetSize, char trial)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	461a      	mov	r2, r3
 80007b0:	460b      	mov	r3, r1
 80007b2:	72fb      	strb	r3, [r7, #11]
 80007b4:	4613      	mov	r3, r2
 80007b6:	72bb      	strb	r3, [r7, #10]
    char cnt=0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	75fb      	strb	r3, [r7, #23]

	memset(returnData,0x00,sizeof(returnData));
 80007bc:	2219      	movs	r2, #25
 80007be:	2100      	movs	r1, #0
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <GSM_AT_Send+0x84>)
 80007c2:	f002 fe47 	bl	8003454 <memset>
	memcpy(returnData,rData,RetSize);
 80007c6:	7abb      	ldrb	r3, [r7, #10]
 80007c8:	461a      	mov	r2, r3
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4816      	ldr	r0, [pc, #88]	; (8000828 <GSM_AT_Send+0x84>)
 80007ce:	f002 fe33 	bl	8003438 <memcpy>

    while(cnt<trial)
 80007d2:	e01e      	b.n	8000812 <GSM_AT_Send+0x6e>
    {

    	Rx_Cnt = 0;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <GSM_AT_Send+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
        memset(Uart_Data,0x00,sizeof(Uart_Data));
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	2100      	movs	r1, #0
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <GSM_AT_Send+0x8c>)
 80007e0:	f002 fe38 	bl	8003454 <memset>
        HAL_UART_Transmit(&huart3, Cmd, CmdSize, 50);
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	2332      	movs	r3, #50	; 0x32
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <GSM_AT_Send+0x90>)
 80007ee:	f001 fe42 	bl	8002476 <HAL_UART_Transmit>
        HAL_Delay(500);
 80007f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f6:	f000 fa11 	bl	8000c1c <HAL_Delay>
        if(Rx_Flag)
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <GSM_AT_Send+0x94>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <GSM_AT_Send+0x68>
        {
        	Rx_Flag = 0;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <GSM_AT_Send+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
        	return 0;
 8000808:	2300      	movs	r3, #0
 800080a:	e008      	b.n	800081e <GSM_AT_Send+0x7a>
        }
    	cnt++;
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	3301      	adds	r3, #1
 8000810:	75fb      	strb	r3, [r7, #23]
    while(cnt<trial)
 8000812:	7dfa      	ldrb	r2, [r7, #23]
 8000814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3db      	bcc.n	80007d4 <GSM_AT_Send+0x30>
    }

    return 1;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000c8 	.word	0x200000c8
 800082c:	20000028 	.word	0x20000028
 8000830:	200000e4 	.word	0x200000e4
 8000834:	2000002c 	.word	0x2000002c
 8000838:	20000029 	.word	0x20000029

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_I2C_MspInit+0x84>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d12b      	bne.n	8000912 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_I2C_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <HAL_I2C_MspInit+0x88>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_I2C_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e6:	2304      	movs	r3, #4
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <HAL_I2C_MspInit+0x8c>)
 80008f2:	f000 fb5b 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_I2C_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_I2C_MspInit+0x88>)
 8000900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_I2C_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40005400 	.word	0x40005400
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d152      	bne.n	80009f0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HAL_UART_MspInit+0xd4>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_UART_MspInit+0xd4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_UART_MspInit+0xd4>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_UART_MspInit+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800099e:	2320      	movs	r3, #32
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ae:	2307      	movs	r3, #7
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0xd8>)
 80009ba:	f000 faf7 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d0:	2307      	movs	r3, #7
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_UART_MspInit+0xdc>)
 80009dc:	f000 fae6 	bl	8000fac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2027      	movs	r0, #39	; 0x27
 80009e6:	f000 fa18 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009ea:	2027      	movs	r0, #39	; 0x27
 80009ec:	f000 fa31 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004800 	.word	0x40004800
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020400 	.word	0x40020400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8c2 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  HAL_UART_Receive(&huart3, &Rx_Byte[0], 1, 10);
 8000a60:	230a      	movs	r3, #10
 8000a62:	2201      	movs	r2, #1
 8000a64:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <USART3_IRQHandler+0x4c>)
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <USART3_IRQHandler+0x50>)
 8000a68:	f001 fd97 	bl	800259a <HAL_UART_Receive>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a6c:	480f      	ldr	r0, [pc, #60]	; (8000aac <USART3_IRQHandler+0x50>)
 8000a6e:	f001 fe37 	bl	80026e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Uart_Data[Rx_Cnt++] = Rx_Byte[0];
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <USART3_IRQHandler+0x54>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	b2d1      	uxtb	r1, r2
 8000a7a:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <USART3_IRQHandler+0x54>)
 8000a7c:	7011      	strb	r1, [r2, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <USART3_IRQHandler+0x4c>)
 8000a82:	7819      	ldrb	r1, [r3, #0]
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <USART3_IRQHandler+0x58>)
 8000a86:	5499      	strb	r1, [r3, r2]

    if(strstr(Uart_Data,returnData) != 0)
 8000a88:	490b      	ldr	r1, [pc, #44]	; (8000ab8 <USART3_IRQHandler+0x5c>)
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <USART3_IRQHandler+0x58>)
 8000a8c:	f002 fcea 	bl	8003464 <strstr>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <USART3_IRQHandler+0x46>
    {
  	  Rx_Cnt = 0;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <USART3_IRQHandler+0x54>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
  	  Rx_Flag = 1;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <USART3_IRQHandler+0x60>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
    }

  /* USER CODE END USART3_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001e4 	.word	0x200001e4
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	200000e4 	.word	0x200000e4
 8000ab8:	200000c8 	.word	0x200000c8
 8000abc:	20000029 	.word	0x20000029

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fc6d 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fcf1 	bl	80004fc <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	08003508 	.word	0x08003508
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	200001ec 	.word	0x200001ec

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe6c 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200001e8 	.word	0x200001e8

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200001e8 	.word	0x200001e8

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff feb6 	bl	8000c04 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d008      	beq.n	8000eb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e052      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0216 	bic.w	r2, r2, #22
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <HAL_DMA_Abort+0x62>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0208 	bic.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	e013      	b.n	8000f32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0a:	f7ff fe7b 	bl	8000c04 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d90c      	bls.n	8000f32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e015      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e4      	bne.n	8000f0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f44:	223f      	movs	r2, #63	; 0x3f
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d004      	beq.n	8000f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e00c      	b.n	8000f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2205      	movs	r2, #5
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e165      	b.n	8001294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8154 	bne.w	800128e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80ae 	beq.w	800128e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a5c      	ldr	r2, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x300>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x308>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x21a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x30c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x216>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x310>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x212>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x314>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x20e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x318>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x20a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x31c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x206>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a49      	ldr	r2, [pc, #292]	; (80012cc <HAL_GPIO_Init+0x320>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x202>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x21c>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <HAL_GPIO_Init+0x324>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120a:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <HAL_GPIO_Init+0x324>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_GPIO_Init+0x324>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_GPIO_Init+0x324>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae96 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e12b      	b.n	800153e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff facc 	bl	8000898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001338:	f000 fbd8 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a81      	ldr	r2, [pc, #516]	; (8001548 <HAL_I2C_Init+0x274>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d807      	bhi.n	8001358 <HAL_I2C_Init+0x84>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_I2C_Init+0x278>)
 800134c:	4293      	cmp	r3, r2
 800134e:	bf94      	ite	ls
 8001350:	2301      	movls	r3, #1
 8001352:	2300      	movhi	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e006      	b.n	8001366 <HAL_I2C_Init+0x92>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a7d      	ldr	r2, [pc, #500]	; (8001550 <HAL_I2C_Init+0x27c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	bf94      	ite	ls
 8001360:	2301      	movls	r3, #1
 8001362:	2300      	movhi	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0e7      	b.n	800153e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4a78      	ldr	r2, [pc, #480]	; (8001554 <HAL_I2C_Init+0x280>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9b      	lsrs	r3, r3, #18
 8001378:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <HAL_I2C_Init+0x274>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d802      	bhi.n	80013a8 <HAL_I2C_Init+0xd4>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	e009      	b.n	80013bc <HAL_I2C_Init+0xe8>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_I2C_Init+0x284>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	3301      	adds	r3, #1
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	495c      	ldr	r1, [pc, #368]	; (8001548 <HAL_I2C_Init+0x274>)
 80013d8:	428b      	cmp	r3, r1
 80013da:	d819      	bhi.n	8001410 <HAL_I2C_Init+0x13c>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1e59      	subs	r1, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ea:	1c59      	adds	r1, r3, #1
 80013ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013f0:	400b      	ands	r3, r1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <HAL_I2C_Init+0x138>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1e59      	subs	r1, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fbb1 f3f3 	udiv	r3, r1, r3
 8001404:	3301      	adds	r3, #1
 8001406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140a:	e051      	b.n	80014b0 <HAL_I2C_Init+0x1dc>
 800140c:	2304      	movs	r3, #4
 800140e:	e04f      	b.n	80014b0 <HAL_I2C_Init+0x1dc>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d111      	bne.n	800143c <HAL_I2C_Init+0x168>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1e58      	subs	r0, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	440b      	add	r3, r1
 8001426:	fbb0 f3f3 	udiv	r3, r0, r3
 800142a:	3301      	adds	r3, #1
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	e012      	b.n	8001462 <HAL_I2C_Init+0x18e>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	0099      	lsls	r1, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001452:	3301      	adds	r3, #1
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x196>
 8001466:	2301      	movs	r3, #1
 8001468:	e022      	b.n	80014b0 <HAL_I2C_Init+0x1dc>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10e      	bne.n	8001490 <HAL_I2C_Init+0x1bc>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1e58      	subs	r0, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	440b      	add	r3, r1
 8001480:	fbb0 f3f3 	udiv	r3, r0, r3
 8001484:	3301      	adds	r3, #1
 8001486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148e:	e00f      	b.n	80014b0 <HAL_I2C_Init+0x1dc>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1e58      	subs	r0, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	0099      	lsls	r1, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	6809      	ldr	r1, [r1, #0]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6911      	ldr	r1, [r2, #16]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68d2      	ldr	r2, [r2, #12]
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	000186a0 	.word	0x000186a0
 800154c:	001e847f 	.word	0x001e847f
 8001550:	003d08ff 	.word	0x003d08ff
 8001554:	431bde83 	.word	0x431bde83
 8001558:	10624dd3 	.word	0x10624dd3

0800155c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	460b      	mov	r3, r1
 800156a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fb4a 	bl	8000c04 <HAL_GetTick>
 8001570:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b20      	cmp	r3, #32
 8001580:	f040 8111 	bne.w	80017a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2319      	movs	r3, #25
 800158a:	2201      	movs	r2, #1
 800158c:	4988      	ldr	r1, [pc, #544]	; (80017b0 <HAL_I2C_IsDeviceReady+0x254>)
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 f912 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800159a:	2302      	movs	r3, #2
 800159c:	e104      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_I2C_IsDeviceReady+0x50>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e0fd      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d007      	beq.n	80015d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0201 	orr.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2224      	movs	r2, #36	; 0x24
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <HAL_I2C_IsDeviceReady+0x258>)
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001604:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f8d0 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00d      	beq.n	800163a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800162c:	d103      	bne.n	8001636 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001634:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b6      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001648:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fadb 	bl	8000c04 <HAL_GetTick>
 800164e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b02      	cmp	r3, #2
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800167e:	e025      	b.n	80016cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001680:	f7ff fac0 	bl	8000c04 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d302      	bcc.n	8001696 <HAL_I2C_IsDeviceReady+0x13a>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	22a0      	movs	r2, #160	; 0xa0
 800169a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2ba0      	cmp	r3, #160	; 0xa0
 80016d6:	d005      	beq.n	80016e4 <HAL_I2C_IsDeviceReady+0x188>
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_I2C_IsDeviceReady+0x188>
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0cd      	beq.n	8001680 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d129      	bne.n	800174e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001708:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2319      	movs	r3, #25
 8001726:	2201      	movs	r2, #1
 8001728:	4921      	ldr	r1, [pc, #132]	; (80017b0 <HAL_I2C_IsDeviceReady+0x254>)
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f844 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e036      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e02c      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001766:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2319      	movs	r3, #25
 800176e:	2201      	movs	r2, #1
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <HAL_I2C_IsDeviceReady+0x254>)
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f820 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e012      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3301      	adds	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	f4ff af32 	bcc.w	80015f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	00100002 	.word	0x00100002
 80017b4:	ffff0000 	.word	0xffff0000

080017b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c8:	e025      	b.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d021      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d2:	f7ff fa17 	bl	8000c04 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d302      	bcc.n	80017e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d116      	bne.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f043 0220 	orr.w	r2, r3, #32
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e023      	b.n	800185e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10d      	bne.n	800183c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4013      	ands	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	e00c      	b.n	8001856 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4013      	ands	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	429a      	cmp	r2, r3
 800185a:	d0b6      	beq.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_PWREx_EnableOverDrive+0x94>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001894:	f7ff f9b6 	bl	8000c04 <HAL_GetTick>
 8001898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800189a:	e009      	b.n	80018b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800189c:	f7ff f9b2 	bl	8000c04 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018aa:	d901      	bls.n	80018b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e01f      	b.n	80018f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d1ee      	bne.n	800189c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c4:	f7ff f99e 	bl	8000c04 <HAL_GetTick>
 80018c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018ca:	e009      	b.n	80018e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018cc:	f7ff f99a 	bl	8000c04 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018da:	d901      	bls.n	80018e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e007      	b.n	80018f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_PWREx_EnableOverDrive+0x98>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018ec:	d1ee      	bne.n	80018cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	420e0040 	.word	0x420e0040
 8001900:	40007000 	.word	0x40007000
 8001904:	420e0044 	.word	0x420e0044

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cc      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d90c      	bls.n	8001944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d044      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e067      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f904 	bl	8000c04 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f900 	bl	8000c04 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f855 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f864 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080034e0 	.word	0x080034e0
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	080034f0 	.word	0x080034f0

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffdc 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0b5b      	lsrs	r3, r3, #13
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	080034f0 	.word	0x080034f0

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b088      	sub	sp, #32
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b58:	4bce      	ldr	r3, [pc, #824]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	f200 818d 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x344>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_RCC_GetSysClockFreq+0x30>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001ba1 	.word	0x08001ba1
 8001b70:	08001e81 	.word	0x08001e81
 8001b74:	08001e81 	.word	0x08001e81
 8001b78:	08001e81 	.word	0x08001e81
 8001b7c:	08001ba7 	.word	0x08001ba7
 8001b80:	08001e81 	.word	0x08001e81
 8001b84:	08001e81 	.word	0x08001e81
 8001b88:	08001e81 	.word	0x08001e81
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001e81 	.word	0x08001e81
 8001b94:	08001e81 	.word	0x08001e81
 8001b98:	08001e81 	.word	0x08001e81
 8001b9c:	08001d21 	.word	0x08001d21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4bbd      	ldr	r3, [pc, #756]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ba2:	61bb      	str	r3, [r7, #24]
       break;
 8001ba4:	e16f      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4bbd      	ldr	r3, [pc, #756]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x360>)
 8001ba8:	61bb      	str	r3, [r7, #24]
      break;
 8001baa:	e16c      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4bb9      	ldr	r3, [pc, #740]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4bb7      	ldr	r3, [pc, #732]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d053      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4bb4      	ldr	r3, [pc, #720]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	ea02 0400 	and.w	r4, r2, r0
 8001bda:	603c      	str	r4, [r7, #0]
 8001bdc:	400b      	ands	r3, r1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	014b      	lsls	r3, r1, #5
 8001bf2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf6:	0142      	lsls	r2, r0, #5
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	1ac0      	subs	r0, r0, r3
 8001c00:	462b      	mov	r3, r5
 8001c02:	eb61 0103 	sbc.w	r1, r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c14:	0182      	lsls	r2, r0, #6
 8001c16:	1a12      	subs	r2, r2, r0
 8001c18:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	00d9      	lsls	r1, r3, #3
 8001c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c2a:	00d0      	lsls	r0, r2, #3
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4621      	mov	r1, r4
 8001c32:	1852      	adds	r2, r2, r1
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb43 0101 	adc.w	r1, r3, r1
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0259      	lsls	r1, r3, #9
 8001c46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c4a:	0250      	lsls	r0, r2, #9
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f7fe fad2 	bl	8000204 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e04c      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea02 0a00 	and.w	sl, r2, r0
 8001c82:	ea03 0b01 	and.w	fp, r3, r1
 8001c86:	4650      	mov	r0, sl
 8001c88:	4659      	mov	r1, fp
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	014b      	lsls	r3, r1, #5
 8001c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c98:	0142      	lsls	r2, r0, #5
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	ebb0 000a 	subs.w	r0, r0, sl
 8001ca2:	eb61 010b 	sbc.w	r1, r1, fp
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb4:	0182      	lsls	r2, r0, #6
 8001cb6:	1a12      	subs	r2, r2, r0
 8001cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbc:	f04f 0000 	mov.w	r0, #0
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	00d9      	lsls	r1, r3, #3
 8001cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cca:	00d0      	lsls	r0, r2, #3
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	eb12 020a 	adds.w	r2, r2, sl
 8001cd4:	eb43 030b 	adc.w	r3, r3, fp
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0299      	lsls	r1, r3, #10
 8001ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ce6:	0290      	lsls	r0, r2, #10
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe fa84 	bl	8000204 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	61bb      	str	r3, [r7, #24]
      break;
 8001d1e:	e0b2      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d28:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d04d      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	ea02 0800 	and.w	r8, r2, r0
 8001d4e:	ea03 0901 	and.w	r9, r3, r1
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	014b      	lsls	r3, r1, #5
 8001d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d64:	0142      	lsls	r2, r0, #5
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d6e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	018b      	lsls	r3, r1, #6
 8001d7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d80:	0182      	lsls	r2, r0, #6
 8001d82:	1a12      	subs	r2, r2, r0
 8001d84:	eb63 0301 	sbc.w	r3, r3, r1
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	00d9      	lsls	r1, r3, #3
 8001d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d96:	00d0      	lsls	r0, r2, #3
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	eb12 0208 	adds.w	r2, r2, r8
 8001da0:	eb43 0309 	adc.w	r3, r3, r9
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0259      	lsls	r1, r3, #9
 8001dae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001db2:	0250      	lsls	r0, r2, #9
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f7fe fa1e 	bl	8000204 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	e04a      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	ea02 0400 	and.w	r4, r2, r0
 8001dea:	ea03 0501 	and.w	r5, r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	014b      	lsls	r3, r1, #5
 8001dfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e00:	0142      	lsls	r2, r0, #5
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	1b00      	subs	r0, r0, r4
 8001e08:	eb61 0105 	sbc.w	r1, r1, r5
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	018b      	lsls	r3, r1, #6
 8001e16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e1a:	0182      	lsls	r2, r0, #6
 8001e1c:	1a12      	subs	r2, r2, r0
 8001e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	00d9      	lsls	r1, r3, #3
 8001e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e30:	00d0      	lsls	r0, r2, #3
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	1912      	adds	r2, r2, r4
 8001e38:	eb45 0303 	adc.w	r3, r5, r3
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	0299      	lsls	r1, r3, #10
 8001e46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e4a:	0290      	lsls	r0, r2, #10
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	f7fe f9d2 	bl	8000204 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0f1b      	lsrs	r3, r3, #28
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	61bb      	str	r3, [r7, #24]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e82:	61bb      	str	r3, [r7, #24]
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	69bb      	ldr	r3, [r7, #24]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e28d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8083 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ec0:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ecc:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d112      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b84      	ldr	r3, [pc, #528]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x124>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e25a      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x90>
 8001f22:	4b7c      	ldr	r3, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7b      	ldr	r2, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xb4>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6b      	ldr	r2, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe46 	bl	8000c04 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fe42 	bl	8000c04 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e21f      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xdc>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fe32 	bl	8000c04 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fe2e 	bl	8000c04 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e20b      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x104>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06f      	beq.n	80020b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d017      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fde:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fea:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1d3      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x278>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fddb 	bl	8000c04 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe fdd7 	bl	8000c04 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1b4      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4925      	ldr	r1, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x278>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fdba 	bl	8000c04 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe fdb6 	bl	8000c04 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e193      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe fd9a 	bl	8000c04 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe fd96 	bl	8000c04 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e173      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x234>
 80020f2:	e01b      	b.n	800212c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe fd83 	bl	8000c04 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e00e      	b.n	8002120 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe fd7f 	bl	8000c04 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d907      	bls.n	8002120 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e15c      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 8002114:	40023800 	.word	0x40023800
 8002118:	42470000 	.word	0x42470000
 800211c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b8a      	ldr	r3, [pc, #552]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ea      	bne.n	8002102 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8097 	beq.w	8002268 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b79      	ldr	r3, [pc, #484]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a75      	ldr	r2, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe fd3f 	bl	8000c04 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe fd3b 	bl	8000c04 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e118      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x31e>
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x340>
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a60      	ldr	r2, [pc, #384]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021e0:	4b5a      	ldr	r3, [pc, #360]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a59      	ldr	r2, [pc, #356]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe fd00 	bl	8000c04 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe fcfc 	bl	8000c04 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0d7      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x368>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe fcea 	bl	8000c04 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fce6 	bl	8000c04 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0c1      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ad 	beq.w	80023cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d060      	beq.n	8002340 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d145      	bne.n	8002312 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fcba 	bl	8000c04 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fcb6 	bl	8000c04 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e093      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	491b      	ldr	r1, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fc8b 	bl	8000c04 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fc87 	bl	8000c04 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e064      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x452>
 8002310:	e05c      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fc74 	bl	8000c04 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fc70 	bl	8000c04 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x480>
 800233e:	e045      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e040      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_RCC_OscConfig+0x538>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800238e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d119      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10f      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e03f      	b.n	800246e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fa90 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fe1d 	bl	8003060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b08a      	sub	sp, #40	; 0x28
 800247a:	af02      	add	r7, sp, #8
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d17c      	bne.n	8002590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_UART_Transmit+0x2c>
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e075      	b.n	8002592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Transmit+0x3e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e06e      	b.n	8002592 <HAL_UART_Transmit+0x11c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fb9b 	bl	8000c04 <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d108      	bne.n	80024f8 <HAL_UART_Transmit+0x82>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e003      	b.n	8002500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002508:	e02a      	b.n	8002560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fb9b 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e036      	b.n	8002592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e007      	b.n	8002552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1cf      	bne.n	800250a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fb6b 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 808c 	bne.w	80026d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Receive+0x2e>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e084      	b.n	80026d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_UART_Receive+0x40>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e07d      	b.n	80026d6 <HAL_UART_Receive+0x13c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2222      	movs	r2, #34	; 0x22
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fb05 	bl	8000c04 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Receive+0x8a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002634:	e043      	b.n	80026be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2120      	movs	r1, #32
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fb05 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e042      	b.n	80026d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	b29a      	uxth	r2, r3
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	3302      	adds	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e01f      	b.n	80026b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d007      	beq.n	800268a <HAL_UART_Receive+0xf0>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_UART_Receive+0xfe>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e008      	b.n	80026aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1b6      	bne.n	8002636 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0ba      	sub	sp, #232	; 0xe8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800271e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
 8002732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fbd3 	bl	8002eea <UART_Receive_IT>
      return;
 8002744:	e256      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80de 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
 8002750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80d1 	beq.w	800290c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
 800279a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
 80027be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
 80027e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0208 	orr.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 81ed 	beq.w	8002bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb5e 	bl	8002eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_UART_IRQHandler+0x17a>
 8002852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d04f      	beq.n	80028fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa66 	bl	8002d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d141      	bne.n	80028f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3314      	adds	r3, #20
 8002896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800289a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1d9      	bne.n	800286e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4a7d      	ldr	r2, [pc, #500]	; (8002abc <HAL_UART_IRQHandler+0x3dc>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fb49 	bl	8000f66 <HAL_DMA_Abort_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e00e      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f99a 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	e00a      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f996 	bl	8002c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	e006      	b.n	8002908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f992 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002906:	e170      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	bf00      	nop
    return;
 800290a:	e16e      	b.n	8002bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 814a 	bne.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8143 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 813c 	beq.w	8002baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	f040 80b4 	bne.w	8002ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8140 	beq.w	8002bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002976:	429a      	cmp	r2, r3
 8002978:	f080 8139 	bcs.w	8002bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	f000 8088 	beq.w	8002aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1d9      	bne.n	8002992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e1      	bne.n	80029de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e3      	bne.n	8002a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	f023 0310 	bic.w	r3, r3, #16
 8002a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e3      	bne.n	8002a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe f9f2 	bl	8000e86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8c0 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab8:	e099      	b.n	8002bee <HAL_UART_IRQHandler+0x50e>
 8002aba:	bf00      	nop
 8002abc:	08002df3 	.word	0x08002df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808b 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b42:	633a      	str	r2, [r7, #48]	; 0x30
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	617b      	str	r3, [r7, #20]
   return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e3      	bne.n	8002b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f848 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ba8:	e023      	b.n	8002bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f929 	bl	8002e1a <UART_Transmit_IT>
    return;
 8002bc8:	e014      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
 8002bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f969 	bl	8002eba <UART_EndTransmit_IT>
    return;
 8002be8:	e004      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8002bf2:	bf00      	nop
  }
}
 8002bf4:	37e8      	adds	r7, #232	; 0xe8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop

08002bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	; 0x40
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c60:	e050      	b.n	8002d04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d04c      	beq.n	8002d04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c70:	f7fd ffc8 	bl	8000c04 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d241      	bcs.n	8002d04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca0:	637a      	str	r2, [r7, #52]	; 0x34
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cd4:	623a      	str	r2, [r7, #32]
 8002cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	69f9      	ldr	r1, [r7, #28]
 8002cda:	6a3a      	ldr	r2, [r7, #32]
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e00f      	b.n	8002d24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d09f      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3740      	adds	r7, #64	; 0x40
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b095      	sub	sp, #84	; 0x54
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d54:	643a      	str	r2, [r7, #64]	; 0x40
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d5c:	e841 2300 	strex	r3, r2, [r1]
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d119      	bne.n	8002dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f023 0310 	bic.w	r3, r3, #16
 8002dba:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc4:	61ba      	str	r2, [r7, #24]
 8002dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6979      	ldr	r1, [r7, #20]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e5      	bne.n	8002da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002de6:	bf00      	nop
 8002de8:	3754      	adds	r7, #84	; 0x54
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff09 	bl	8002c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b21      	cmp	r3, #33	; 0x21
 8002e2c:	d13e      	bne.n	8002eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d114      	bne.n	8002e62 <UART_Transmit_IT+0x48>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d110      	bne.n	8002e62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	621a      	str	r2, [r3, #32]
 8002e60:	e008      	b.n	8002e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6211      	str	r1, [r2, #32]
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4619      	mov	r1, r3
 8002e82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10f      	bne.n	8002ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fe8e 	bl	8002bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08c      	sub	sp, #48	; 0x30
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b22      	cmp	r3, #34	; 0x22
 8002efc:	f040 80ab 	bne.w	8003056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	d117      	bne.n	8002f3a <UART_Receive_IT+0x50>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d113      	bne.n	8002f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
 8002f38:	e026      	b.n	8002f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d007      	beq.n	8002f5e <UART_Receive_IT+0x74>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <UART_Receive_IT+0x82>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e008      	b.n	8002f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4619      	mov	r1, r3
 8002f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15a      	bne.n	8003052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0220 	bic.w	r2, r2, #32
 8002faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d135      	bne.n	8003048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f023 0310 	bic.w	r3, r3, #16
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	623a      	str	r2, [r7, #32]
 8003004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	69f9      	ldr	r1, [r7, #28]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d10a      	bne.n	800303a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fdf9 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
 8003046:	e002      	b.n	800304e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fde1 	bl	8002c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e002      	b.n	8003058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3730      	adds	r7, #48	; 0x30
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	b09f      	sub	sp, #124	; 0x7c
 8003066:	af00      	add	r7, sp, #0
 8003068:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	ea40 0301 	orr.w	r3, r0, r1
 8003080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	431a      	orrs	r2, r3
 8003092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4313      	orrs	r3, r2
 8003098:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030a4:	f021 010c 	bic.w	r1, r1, #12
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ae:	430b      	orrs	r3, r1
 80030b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030be:	6999      	ldr	r1, [r3, #24]
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	ea40 0301 	orr.w	r3, r0, r1
 80030c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4bc5      	ldr	r3, [pc, #788]	; (80033e4 <UART_SetConfig+0x384>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d004      	beq.n	80030de <UART_SetConfig+0x7e>
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4bc3      	ldr	r3, [pc, #780]	; (80033e8 <UART_SetConfig+0x388>)
 80030da:	429a      	cmp	r2, r3
 80030dc:	d103      	bne.n	80030e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030de:	f7fe fd19 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 80030e2:	6778      	str	r0, [r7, #116]	; 0x74
 80030e4:	e002      	b.n	80030ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7fe fd01 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 80030ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	f040 80b6 	bne.w	8003264 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fa:	461c      	mov	r4, r3
 80030fc:	f04f 0500 	mov.w	r5, #0
 8003100:	4622      	mov	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	1891      	adds	r1, r2, r2
 8003106:	6439      	str	r1, [r7, #64]	; 0x40
 8003108:	415b      	adcs	r3, r3
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003110:	1912      	adds	r2, r2, r4
 8003112:	eb45 0303 	adc.w	r3, r5, r3
 8003116:	f04f 0000 	mov.w	r0, #0
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	00d9      	lsls	r1, r3, #3
 8003120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003124:	00d0      	lsls	r0, r2, #3
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	1911      	adds	r1, r2, r4
 800312c:	6639      	str	r1, [r7, #96]	; 0x60
 800312e:	416b      	adcs	r3, r5
 8003130:	667b      	str	r3, [r7, #100]	; 0x64
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	1891      	adds	r1, r2, r2
 800313e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003140:	415b      	adcs	r3, r3
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003148:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800314c:	f7fd f85a 	bl	8000204 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4ba5      	ldr	r3, [pc, #660]	; (80033ec <UART_SetConfig+0x38c>)
 8003156:	fba3 2302 	umull	r2, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	011e      	lsls	r6, r3, #4
 800315e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003160:	461c      	mov	r4, r3
 8003162:	f04f 0500 	mov.w	r5, #0
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	1891      	adds	r1, r2, r2
 800316c:	6339      	str	r1, [r7, #48]	; 0x30
 800316e:	415b      	adcs	r3, r3
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
 8003172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003176:	1912      	adds	r2, r2, r4
 8003178:	eb45 0303 	adc.w	r3, r5, r3
 800317c:	f04f 0000 	mov.w	r0, #0
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	00d9      	lsls	r1, r3, #3
 8003186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800318a:	00d0      	lsls	r0, r2, #3
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	1911      	adds	r1, r2, r4
 8003192:	65b9      	str	r1, [r7, #88]	; 0x58
 8003194:	416b      	adcs	r3, r5
 8003196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	461a      	mov	r2, r3
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80031a6:	415b      	adcs	r3, r3
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031b2:	f7fd f827 	bl	8000204 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <UART_SetConfig+0x38c>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	3332      	adds	r3, #50	; 0x32
 80031ce:	4a87      	ldr	r2, [pc, #540]	; (80033ec <UART_SetConfig+0x38c>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031dc:	441e      	add	r6, r3
 80031de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e0:	4618      	mov	r0, r3
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	1894      	adds	r4, r2, r2
 80031ec:	623c      	str	r4, [r7, #32]
 80031ee:	415b      	adcs	r3, r3
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031f6:	1812      	adds	r2, r2, r0
 80031f8:	eb41 0303 	adc.w	r3, r1, r3
 80031fc:	f04f 0400 	mov.w	r4, #0
 8003200:	f04f 0500 	mov.w	r5, #0
 8003204:	00dd      	lsls	r5, r3, #3
 8003206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800320a:	00d4      	lsls	r4, r2, #3
 800320c:	4622      	mov	r2, r4
 800320e:	462b      	mov	r3, r5
 8003210:	1814      	adds	r4, r2, r0
 8003212:	653c      	str	r4, [r7, #80]	; 0x50
 8003214:	414b      	adcs	r3, r1
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	1891      	adds	r1, r2, r2
 8003224:	61b9      	str	r1, [r7, #24]
 8003226:	415b      	adcs	r3, r3
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003232:	f7fc ffe7 	bl	8000204 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <UART_SetConfig+0x38c>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	; 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3332      	adds	r3, #50	; 0x32
 800324e:	4a67      	ldr	r2, [pc, #412]	; (80033ec <UART_SetConfig+0x38c>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 0207 	and.w	r2, r3, #7
 800325a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4432      	add	r2, r6
 8003260:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003262:	e0b9      	b.n	80033d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003266:	461c      	mov	r4, r3
 8003268:	f04f 0500 	mov.w	r5, #0
 800326c:	4622      	mov	r2, r4
 800326e:	462b      	mov	r3, r5
 8003270:	1891      	adds	r1, r2, r2
 8003272:	6139      	str	r1, [r7, #16]
 8003274:	415b      	adcs	r3, r3
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800327c:	1912      	adds	r2, r2, r4
 800327e:	eb45 0303 	adc.w	r3, r5, r3
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	00d9      	lsls	r1, r3, #3
 800328c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003290:	00d0      	lsls	r0, r2, #3
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	eb12 0804 	adds.w	r8, r2, r4
 800329a:	eb43 0905 	adc.w	r9, r3, r5
 800329e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	008b      	lsls	r3, r1, #2
 80032b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032b6:	0082      	lsls	r2, r0, #2
 80032b8:	4640      	mov	r0, r8
 80032ba:	4649      	mov	r1, r9
 80032bc:	f7fc ffa2 	bl	8000204 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <UART_SetConfig+0x38c>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011e      	lsls	r6, r3, #4
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	4618      	mov	r0, r3
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	1894      	adds	r4, r2, r2
 80032dc:	60bc      	str	r4, [r7, #8]
 80032de:	415b      	adcs	r3, r3
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e6:	1812      	adds	r2, r2, r0
 80032e8:	eb41 0303 	adc.w	r3, r1, r3
 80032ec:	f04f 0400 	mov.w	r4, #0
 80032f0:	f04f 0500 	mov.w	r5, #0
 80032f4:	00dd      	lsls	r5, r3, #3
 80032f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032fa:	00d4      	lsls	r4, r2, #3
 80032fc:	4622      	mov	r2, r4
 80032fe:	462b      	mov	r3, r5
 8003300:	1814      	adds	r4, r2, r0
 8003302:	64bc      	str	r4, [r7, #72]	; 0x48
 8003304:	414b      	adcs	r3, r1
 8003306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	008b      	lsls	r3, r1, #2
 800331c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003320:	0082      	lsls	r2, r0, #2
 8003322:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003326:	f7fc ff6d 	bl	8000204 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <UART_SetConfig+0x38c>)
 8003330:	fba3 1302 	umull	r1, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	2164      	movs	r1, #100	; 0x64
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	3332      	adds	r3, #50	; 0x32
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <UART_SetConfig+0x38c>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800334e:	441e      	add	r6, r3
 8003350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003352:	4618      	mov	r0, r3
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	1894      	adds	r4, r2, r2
 800335e:	603c      	str	r4, [r7, #0]
 8003360:	415b      	adcs	r3, r3
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003368:	1812      	adds	r2, r2, r0
 800336a:	eb41 0303 	adc.w	r3, r1, r3
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	f04f 0500 	mov.w	r5, #0
 8003376:	00dd      	lsls	r5, r3, #3
 8003378:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800337c:	00d4      	lsls	r4, r2, #3
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	eb12 0a00 	adds.w	sl, r2, r0
 8003386:	eb43 0b01 	adc.w	fp, r3, r1
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	008b      	lsls	r3, r1, #2
 800339e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033a2:	0082      	lsls	r2, r0, #2
 80033a4:	4650      	mov	r0, sl
 80033a6:	4659      	mov	r1, fp
 80033a8:	f7fc ff2c 	bl	8000204 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <UART_SetConfig+0x38c>)
 80033b2:	fba3 1302 	umull	r1, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2164      	movs	r1, #100	; 0x64
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a09      	ldr	r2, [pc, #36]	; (80033ec <UART_SetConfig+0x38c>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4432      	add	r2, r6
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	377c      	adds	r7, #124	; 0x7c
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e2:	bf00      	nop
 80033e4:	40011000 	.word	0x40011000
 80033e8:	40011400 	.word	0x40011400
 80033ec:	51eb851f 	.word	0x51eb851f

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4d0d      	ldr	r5, [pc, #52]	; (8003428 <__libc_init_array+0x38>)
 80033f4:	4c0d      	ldr	r4, [pc, #52]	; (800342c <__libc_init_array+0x3c>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	2600      	movs	r6, #0
 80033fc:	42a6      	cmp	r6, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	4d0b      	ldr	r5, [pc, #44]	; (8003430 <__libc_init_array+0x40>)
 8003402:	4c0c      	ldr	r4, [pc, #48]	; (8003434 <__libc_init_array+0x44>)
 8003404:	f000 f846 	bl	8003494 <_init>
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	2600      	movs	r6, #0
 800340e:	42a6      	cmp	r6, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f855 3b04 	ldr.w	r3, [r5], #4
 8003418:	4798      	blx	r3
 800341a:	3601      	adds	r6, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003422:	4798      	blx	r3
 8003424:	3601      	adds	r6, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	08003500 	.word	0x08003500
 800342c:	08003500 	.word	0x08003500
 8003430:	08003500 	.word	0x08003500
 8003434:	08003504 	.word	0x08003504

08003438 <memcpy>:
 8003438:	440a      	add	r2, r1
 800343a:	4291      	cmp	r1, r2
 800343c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003440:	d100      	bne.n	8003444 <memcpy+0xc>
 8003442:	4770      	bx	lr
 8003444:	b510      	push	{r4, lr}
 8003446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800344e:	4291      	cmp	r1, r2
 8003450:	d1f9      	bne.n	8003446 <memcpy+0xe>
 8003452:	bd10      	pop	{r4, pc}

08003454 <memset>:
 8003454:	4402      	add	r2, r0
 8003456:	4603      	mov	r3, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <strstr>:
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	780c      	ldrb	r4, [r1, #0]
 8003468:	b164      	cbz	r4, 8003484 <strstr+0x20>
 800346a:	4603      	mov	r3, r0
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	1c5e      	adds	r6, r3, #1
 8003472:	b90a      	cbnz	r2, 8003478 <strstr+0x14>
 8003474:	4610      	mov	r0, r2
 8003476:	e005      	b.n	8003484 <strstr+0x20>
 8003478:	4294      	cmp	r4, r2
 800347a:	d108      	bne.n	800348e <strstr+0x2a>
 800347c:	460d      	mov	r5, r1
 800347e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003482:	b902      	cbnz	r2, 8003486 <strstr+0x22>
 8003484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003486:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800348a:	4297      	cmp	r7, r2
 800348c:	d0f7      	beq.n	800347e <strstr+0x1a>
 800348e:	4633      	mov	r3, r6
 8003490:	e7ec      	b.n	800346c <strstr+0x8>
	...

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
